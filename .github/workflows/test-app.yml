name: Flask Health Check

on:
  push:
    branches: 
      - main
    paths:
      - '**/*.py'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.html'
      - '**/*.css'
  schedule:
    - cron: "0 0 * * 0"
  release:
    types: [published]

permissions:
  contents: read
  packages: write

jobs:
  check-flask-site:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt --upgrade

      - name: Start Flask App in Forks
        if: github.repository != 'SASTRA-Projects/SASTRA-Timetable'
        run: |
          nohup python app.py &

      - name: Set Target URL
        id: set-url
        run: |
          if [ "${{ github.repository }}" = "SASTRA-Projects/SASTRA-Timetable" ]; then
            echo "TARGET_URL=https://sastra-3yx3.onrender.com/" >> $GITHUB_OUTPUT
          else
            echo "TARGET_URL=http://localhost:5000/" >> $GITHUB_OUTPUT
          fi

      - name: Retry Health Check Until Ready (Max 5 Attempts)
        run: |
          ATTEMPT=1
          sleep 20
          while [ $ATTEMPT -le 5 ]; do
            echo "üîÑ Attempt $ATTEMPT: Checking site status..."
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.set-url.outputs.TARGET_URL }}")
            if [ "$STATUS_CODE" = "200" ] || [ "$STATUS_CODE" = "302" ]; then
              echo "‚úÖ Website is UP. Status Code: $STATUS_CODE"              
              break
            fi
            echo "‚ùå Website not ready (Status: $STATUS_CODE). Retrying in 10 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

          if [ "$STATUS_CODE" != "200" ] && [ "$STATUS_CODE" != "302" ]; then
            echo "üö® Site still DOWN after 5 attempts!"
            exit 1
          fi

      - name: Check Login - DB Connection
        id: login-check
        env:
          USERNAME: ${{ secrets.USER }}
          PASSWORD: ${{ secrets.PWD }}
        run: |
          echo "Checking login with test credentials..."
          RESPONSE=$(curl -s -X POST "${{ steps.set-url.outputs.TARGET_URL }}login" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "user=$USERNAME&password=$PASSWORD")

          echo "$RESPONSE" | grep -iq "href=\"/\""
          if [ $? -ne 0 ]; then
            echo "‚ùå Login or DB connection failed!"
            exit 1
          fi
          echo "‚úÖ Login and DB check passed!"

      - name: Set up Docker Buildx
        if: steps.login-check.outcome == 'success'
        uses: docker/setup-buildx-action@v3
      - if: steps.login-check.outcome == 'success'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PWD }}

      - name: Build and Push Docker Image
        if: steps.login-check.outcome == 'success'
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USER }}/sastra:latest
